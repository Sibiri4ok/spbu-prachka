from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from config import TIMEZONE
from datetime import datetime
from aiogram.enums.parse_mode import ParseMode
import sqlite3

from aiohttp import request

import app.keyboards as kb
from config import ADMINS

router = Router()
conn = sqlite3.connect('db.sqlite3')
cursor = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
cursor.execute('''CREATE TABLE IF NOT EXISTS bookings
               (id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                name VARCHAR(30),
                description VARCHAR(50),
                date TEXT,
                slot INTEGER)''')

cursor.execute('''CREATE TABLE IF NOT EXISTS info
               (id INTEGER PRIMARY KEY AUTOINCREMENT,
                date TEXT,
                content TEXT)''')
conn.commit()


class BookingForm(StatesGroup):
    name = State()
    description = State()

class AdminBookingForm(StatesGroup):
    name = State()
    description = State()

class InfoMessage(StatesGroup):
    content = State()

class IdMessage(StatesGroup):
    ID = State()

@router.message(CommandStart())
async def send_welcome(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –ø—Ä–∞—á–µ—á–Ω—É—é ‚Ññ14 –°–ü–ë–ì–£!", reply_markup=kb.main)
    if message.from_user.id in ADMINS:
        await message.answer("–í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!", reply_markup=kb.main_admin)

@router.message(F.text == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
async def show_schedule(message: Message):
    await message.answer("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:", reply_markup=kb.dates_kb())

@router.message(F.text == "–ú–æ–∏ –±—Ä–æ–Ω–∏")
async def show_schedule(message: Message):
    user_dates = cursor.execute('''SELECT date FROM bookings WHERE user_id=?''',
                                (message.from_user.id,)).fetchall()
    user_dates = set(date[0] for date in user_dates)
    if len(user_dates) == 0:
        await message.answer("–£ –í–∞—Å –Ω–µ—Ç –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞—Ç!")
    else:
        await message.answer("–î–∞—Ç—ã –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –∑–∞–ø–∏—Å–∞–ª–∏—Å—å:", reply_markup=kb.dates_kb(user_dates))



@router.message(F.text == "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
async def show_info(message: Message):
    await message.answer(
        "üì¨ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø—Ä–∞—á–µ—á–Ω—É—é ‚Ññ14 –°–ü–±–ì–£!</b>\n\n"
        "üìç <b>–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ:</b>\n"
        "1-–π —ç—Ç–∞–∂, —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–µ –∫—Ä—ã–ª–æ\n\n"
        "üïì <b>–ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã:</b>\n"
        "–ï–∂–µ–¥–Ω–µ–≤–Ω–æ, –∫—Ä–æ–º–µ –ø—Ä–∞–∑–¥–Ω–∏—á–Ω—ã—Ö –¥–Ω–µ–π\n"
        "‚è∞ —Å 9:00 –¥–æ 21:00\n"
        "üçΩ –û–±–µ–¥–µ–Ω–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤: —Å 14:00 –¥–æ 15:00\n\n"
        "üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥:</b>\n"
        "üß∫ –°—Ç–∏—Ä–∫–∞ ‚Äî 120‚ÇΩ\n"
        "üî• –°—É—à–∫–∞ ‚Äî 110‚ÇΩ\n\n"
        "üí≥ <b>–û–ø–ª–∞—Ç–∞:</b> <a href='https://pay.spbu.ru/additional-drying/ '>–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ</a>\n\n"
        "üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Å–ø—Ä–∞–≤–æ–∫:</b>\n"
        "+7 (812) 363-60-00 (–¥–æ–±. 9114)",
        parse_mode=ParseMode.HTML
    )
    msg = cursor.execute('''SELECT date, content FROM info''').fetchall()
    print(msg)

    for date, content in msg:
        await message.answer(f"–î–∞—Ç–∞: {date.split('-')[-1]}.{date.split('-')[-2]}\n–°–æ–æ–±—â–µ–Ω–∏–µ: {content}")



@router.callback_query(F.data.startswith("date"))
async def date_seletected(callback: CallbackQuery):
    date = callback.data.split("_")[1]
    booked_slots = cursor.execute('''SELECT slot FROM bookings WHERE date=?''', (date,)).fetchall()
    booked_slots = [slot[0] for slot in booked_slots]
    user_slot = cursor.execute('''SELECT slot FROM bookings WHERE user_id=? AND date=?''',
                               (callback.from_user.id,date)).fetchone()
    user_slot = user_slot[0] if user_slot is not None else None

    await callback.message.answer(f"–°–ª–æ—Ç—ã –Ω–∞ {date.split('-')[-1]}.{date.split('-')[-2]}:",
                                  reply_markup=kb.slots_kb(date,booked_slots, user_slot))

@router.callback_query(F.data.startswith("slot"))
async def slot_selected(callback: CallbackQuery, state: FSMContext):
    _, date, slot = callback.data.split("_")
    user_id = callback.from_user.id
    active_slot = cursor.execute('''SELECT slot FROM bookings WHERE user_id=? AND date=?''',
                                 (user_id,date)).fetchone()
    if active_slot is not None:
        await callback.answer(f"–í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Å–ª–æ—Ç ‚Ññ{active_slot[0]}")
    else:
        await state.update_data(date=date, slot=slot)
        await state.set_state(BookingForm.name)
        await callback.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")


@router.message(BookingForm.name)
async def get_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(BookingForm.description)
    await message.answer("–ö–∞–∫–æ–π —É—Å–ª—É–≥–æ–π –í—ã —Ö–æ—Ç–∏—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∏ –≤ –∫–∞–∫–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ (—Å—Ç–∏—Ä–∫–∞/—Å—É—à–∫–∞)?")

@router.message(BookingForm.description)
async def get_description(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    data = await state.get_data()
    user_id = message.from_user.id

    cursor.execute('''INSERT INTO bookings (user_id, name, description, date, slot ) VALUES (?, ?, ?, ?, ?)''',
                   (user_id, data['name'], data['description'], data['date'], data['slot']))

    conn.commit()

    booked_slots = cursor.execute('''SELECT slot FROM bookings WHERE date=?''', (data['date'], )).fetchall()
    booked_slots = [slot[0] for slot in booked_slots]
    await message.answer(f"–í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ {data['date'].split('-')[-1]}.{data['date'].split('-')[-2]} –ø–æ–¥ —Å–ª–æ—Ç–æ–º ‚Ññ{data['slot']}!")
    await message.answer(f"–°–ª–æ—Ç—ã –Ω–∞ {data['date'].split('-')[-1]}.{data['date'].split('-')[-2]}:",
                         reply_markup=kb.slots_kb(data['date'], booked_slots, int(data['slot'])))
    await state.clear()
@router.callback_query(F.data.startswith("close_slot"))
async def close_slot(callback: CallbackQuery):
    await callback.answer("–≠—Ç–æ—Ç —Å–ª–æ—Ç –∑–∞–Ω—è—Ç! –ó–∞–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –¥—Ä—É–≥–æ–π —Å–ª–æ—Ç –∏–ª–∏ –≤ –¥—Ä—É–≥–æ–π –¥–µ–Ω—å")

@router.callback_query(F.data.startswith("my_slot"))
async def my_slot(callback: CallbackQuery):
    date, slot = callback.data.split("_")[2:]
    await callback.message.answer(f"–≠—Ç–æ—Ç —Å–ª–æ—Ç ‚Ññ{slot} –Ω–∞ {date.split('-')[-1]}.{date.split('-')[-2]} "
                                  f"–∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω –∑–∞ –í–∞–º–∏! –•–æ—Ç–∏—Ç–µ –ª–∏ –í—ã –µ–≥–æ –æ—Ç–º–µ–Ω–∏—Ç—å?",
                                  reply_markup=kb.cancel_slot(date, int(slot)))

@router.callback_query(F.data.startswith("cancel_slot"))
async def cancel_slot(callback: CallbackQuery):
    date, slot = callback.data.split("_")[2:]
    cursor.execute('''DELETE FROM bookings WHERE date=? AND slot=?''', (date, slot)).fetchone()
    conn.commit()

    booking_slots = cursor.execute('''SELECT slot FROM bookings WHERE date=?''', (date,)).fetchall()
    booking_slots = [slot[0] for slot in booking_slots]

    await callback.answer(f"–í–∞—à —Å–ª–æ—Ç ‚Ññ{slot} –Ω–∞ {date.split('-')[-1]}.{date.split('-')[-2]} –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω")

    await callback.message.answer(f"–°–ª–æ—Ç—ã –Ω–∞ {date.split('-')[-1]}.{date.split('-')[-2]}:",
                                  reply_markup=kb.slots_kb(date, booking_slots, None))

@router.callback_query(F.data.startswith("back_to_slots"))
async def back_to_slots(callback: CallbackQuery):
    date, user_slot = callback.data.split("_")[-2:]
    booked_slots = cursor.execute('''SELECT slot
                                     FROM bookings
                                     WHERE date =?''', (date,)).fetchall()
    booked_slots = [slot[0] for slot in booked_slots]
    await callback.message.edit_reply_markup(reply_markup=kb.slots_kb(date, booked_slots, int(user_slot)))

@router.message(F.text == '–ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ')
async def admin_show_schedule(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=kb.dates_admin_kb())

@router.message(F.text == '–î–æ–±–∞–≤–∏—Ç—å/—É–¥–∞–ª–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é')
async def admin_show_info(message: Message):
    await message.answer("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=kb.add_remove_info())

@router.callback_query(F.data == 'remove_info')
async def remove_info(callback: CallbackQuery, state: FSMContext):
    messages = cursor.execute('''SELECT * FROM info''').fetchall()

    await state.set_state(IdMessage.ID)
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ id —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å")
    for id, date, content in messages:
        await callback.message.answer(f"id: {id} –î–∞—Ç–∞: {date} \n–°–æ–æ–±—â–µ–Ω–∏–µ: {content}")

@router.message(IdMessage.ID)
async def get_id(message: Message, state: FSMContext):
    await state.update_data(id = message.text)
    data = await state.get_data()
    validate_id = cursor.execute('''SELECT * FROM info WHERE id=?''', (data['id'],)).fetchone()
    cursor.execute('''DELETE FROM info WHERE id=?''', (data['id'],)).fetchone()
    conn.commit()

    await state.clear()
    if validate_id is None:
        await message.answer("–°–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–∞–∫–∏–º id –Ω–µ—Ç")
    else:
        await message.answer(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å id={data['id']} –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!")


@router.callback_query(F.data == 'add_info')
async def add_info(callback: CallbackQuery, state: FSMContext):
    await state.set_state(InfoMessage.content)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")

@router.message(InfoMessage.content)
async def get_info(message: Message, state: FSMContext):
    await state.update_data(content=message.text)

    msg = await state.get_data()

    cursor.execute('''INSERT INTO info (date, content) VALUES (?, ?)''',
                   (datetime.now(TIMEZONE).strftime('%Y-%m-%d'),msg['content'],))
    conn.commit()

    await state.clear()

    await message.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")



@router.callback_query(F.data.startswith("admin_date"))
async def admin_date_selected(callback: CallbackQuery):
    _, _, date = callback.data.split("_")
    booked_slots = cursor.execute('''SELECT name, description, slot FROM bookings WHERE date=? ORDER BY slot''',
                                  (date,)).fetchall()
    await callback.message.answer(f"–°–ª–æ—Ç—ã –Ω–∞ {date.split('-')[-1]}.{date.split('-')[-2]}:",
                                  reply_markup=kb.slots_admin_kb(date, booked_slots))

@router.callback_query(F.data.startswith("admin_close_slot"))
async def admin_slot_selected(callback: CallbackQuery):
    _, _, _, date, slot_num = callback.data.split("_")
    await callback.message.answer('–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?',
                                  reply_markup=kb.admin_close_options_slot(date, int(slot_num)))

@router.callback_query(F.data.startswith("admin_delete_slot"))
async def admin_delete_slot(callback: CallbackQuery):
    _, _, _, date, slot_num = callback.data.split("_")
    name, description, date, slot  = cursor.execute('''SELECT name, description, date, slot FROM bookings WHERE date=? AND slot=?''',
                                  (date, slot_num)).fetchone()
    cursor.execute('''DELETE FROM bookings WHERE date=? and slot=?''', (date,slot_num)).fetchone()
    conn.commit()

    booked_slots = cursor.execute('''SELECT name, description, slot FROM bookings WHERE date=? ORDER BY slot''',
                                  (date,)).fetchall()
    await callback.answer(f"–°–ª–æ—Ç –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º {slot} –¥–ª—è {name} –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!")
    await callback.message.answer(f"–°–ª–æ—Ç—ã –Ω–∞ {date.split('-')[-1]}.{date.split('-')[-2]}:",
                                  reply_markup=kb.slots_admin_kb(date, booked_slots))

@router.callback_query(F.data.startswith("admin_available_slot"))
async def admin_available_slot(callback: CallbackQuery):
    _, _, _, date, slot_num = callback.data.split("_")
    await callback.message.answer('–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?',
                                  reply_markup=kb.admin_available_options_slot(date, int(slot_num)))

@router.callback_query(F.data.startswith("admin_add_slot_"))
async def admin_add_slot(callback: CallbackQuery, state: FSMContext):
    _, _, _, date, slot_num = callback.data.split("_")
    await state.update_data(date=date, slot=int(slot_num))
    await state.set_state(AdminBookingForm.name)
    await callback.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –§–ò–û —Å—Ç—É–¥–µ–Ω—Ç–∞:")

@router.message(AdminBookingForm.name)
async def get_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(AdminBookingForm.description)
    await message.answer("–ö–∞–∫–∞—è —É—Å–ª—É–≥–∞ –Ω—É–∂–Ω–∞ —Å—Ç—É–¥–µ–Ω—Ç—É –∏ –≤ –∫–∞–∫–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ (—Å—Ç–∏—Ä–∫–∞/—Å—É—à–∫–∞)?")

@router.message(AdminBookingForm.description)
async def get_description(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    data = await state.get_data()
    user_id = message.from_user.id

    cursor.execute('''INSERT INTO bookings (user_id, name, description, date, slot ) VALUES (?, ?, ?, ?, ?)''',
                   (user_id, data['name'], data['description'], data['date'], data['slot']))

    conn.commit()

    booked_slots = cursor.execute('''SELECT name, description, slot FROM bookings WHERE date=? ORDER BY slot''',
                                  (data['date'],)).fetchall()
    await message.answer(f"–í—ã –∑–∞–ø–∏—Å–∞–ª–∏ —Å–¥—É–¥–µ–Ω—Ç–∞ {data['name']} –Ω–∞ {data['date'].split('-')[-1]}.{data['date'].split('-')[-2]} –ø–æ–¥ —Å–ª–æ—Ç–æ–º ‚Ññ{data['slot']}!")
    await message.answer(f"–°–ª–æ—Ç—ã –Ω–∞ {data['date'].split('-')[-1]}.{data['date'].split('-')[-2]}:",
                         reply_markup=kb.slots_admin_kb(data['date'], booked_slots))
    await state.clear()

